{-
This is a convenience function that combines `concat` and `map`

```
./concatMap a b f xs = ./concat b (./map a b f xs)
```

Examples:

```
./concatMap Integer Integer (./replicate +3 Integer) ([0, 1, 2] : List Integer)
= [0, 0, 0, 1, 1, 1, 2, 2, 2] : List Integer

./concatMap Bool Bool (λ(x : Bool) → [] : List Bool) ([True, False] : List Bool)
= [] : List Bool
```
-}
let concatMap : ∀(a : Type) → ∀(b : Type) → (a → List b) → List a → List b
    =   λ(a : Type)
    →   λ(b : Type)
    →   λ(f : a → List b)
    →   λ(xs : List a)
    →   List/build
        b
        (   λ(list : Type)
        →   λ(cons : b → list → list)
        →   λ(nil : list)
        →   List/fold
            a
            xs
            list
            (λ(x : a) → λ(ys : list) → List/fold b (f x) list cons ys)
            nil
        )

in  concatMap
